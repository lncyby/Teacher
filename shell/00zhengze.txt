正则表达式：
正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，
组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。

给定一个正则表达式和另一个字符串，我们可以达到如下的目的：
1. 给定的字符串是否符合正则表达式的过滤逻辑（称作“匹配”）；
2. 可以通过正则表达式，从字符串中获取我们想要的特定部分。
正则表达式的特点是：
1. 灵活性、逻辑性和功能性非常的强；
2. 可以迅速地用极简单的方式达到字符串的复杂控制。
3. 对于刚接触的人来说，比较晦涩难懂。

支持多种编程语言及脚本

在shell中通常与grep sed  awk  find 等命令一起使用

规则 ：

*    0个或多个在*字符之前的那个普通字符
.    匹配任意一个字符
^    匹配行首
$    匹配行尾

^$  : 匹配空行
^.....$ : 匹配一整行的内容

[] :匹配字符集合,匹配一个字符   1-9 a-z  A-Z
[^...]:匹配除了...之外的

\ ： 转义字符

\<...\>: 精确匹配

\{n\} : 匹配前面字符出现n次
\{n,\} : 匹配前面字符至少出现n次
\{n,m\} : 匹配前面字符出现n--m次

扩展正则表达式匹配
awk  perl

? : 匹配0个或1个之前的字符
+ : 匹配1个或多个之前的那个普通字符
() ： 表示一个字符集合
|  ： 表示或

(a | b | c)  ---> [abc]


grep  -c  只显示数量
      -n  显示行号
      -v  显示除了模式的其他
      -i  大小写不敏感
      -h  多个文件时不显示文件名
      -l  只显示匹配到的文件名
      -r  在子目录中逐层查找
      -E  支持扩展正则表达式
      -e  实现多个查询条件

vim
ctrl alt  t
ctrl shift  n
ctrl shift  t    ctrl + num 切换
exit 退出

i光标前  I行首 o下一行 O当前行 a光标后 A行尾  不同的位置标示进入插入模式

s : 删除光标所在字符进入插入模式
S ：删除光标所在行进入插入模式

b单词开头 e单词结尾 w下一个单词 0行首 $行尾  gg首行  G末行   hjkl 光标跳转命令
cc 删除当期那行进入插入模式
c + b|e|w|0|$  :剪切光标到指定位置进入插入模式
y + b|e|w|0|$  ：复制光标到指定位置
u : 撤销上一步操作
ctrl + r  ：反撤销

x : 删除字符

r ： 替换字符
R : 进入替换状态直到esc退出

/ :进入底行查找   n 进行查找跳转

:  : 进入底行命令

:n,my
:n,md
:num
:w filename

:read filename
:%s/oldword/newword/g
:vsp  左右
:sp 上下

sed 命令及sed编程

sed 是一个非交互式的文本编辑器

sed 主要应用场景：

1.编辑相对交互式文本编辑器而言太大的文件。
2.编辑命令太复杂，在交互式文本编辑器中那一输入
3.对文件扫描一遍，但是需要执行多个编辑函数的情况。

运行
1 在 shell命令行输入sed命令
sed [选项]  ‘sed命令’  输入文件

2 将sed命令插入脚本执行
./sed

选项
-n : 不打印所有行到标准输出

-e : 表示下一个字符串是sed命令

-f : 表示正在调用脚本文件

-i : 直接修改操作文件内容

命令
1 要操作的范围
  使用行号或者正则表达式

  x    指定行号
  x,y  指定从x行到y行
  x,y! 指定不包含x和y行的行

  /pattern/   查询包含模式的行
  /pattern/pattern/

  /pattern/,x  从匹配行到x行
  x,/pattern/

2 具体命令
  p  打印匹配行
  =  打印文件行号
  a\ 在定位行之后追加文本信息

编程语言分类

编译型语言   解释型语言    半编译半解释语言

机器语言  低级语言  高级语言

面向过程   面向对象

技术层面 ： 职业分工
硬件工程师   裸机开发  系统工程师   驱动工程师   软件工程师（win  android  ios  linux 网络软件）

网站开发
